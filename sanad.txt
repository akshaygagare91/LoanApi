**************************************************************************file-upload.service.ts********************************************************************************************************

import { Injectable } from '@angular/core';
import { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FileUploadService {
  private baseUrl = 'http://localhost:8080';

  constructor(private http: HttpClient) {}

  upload(file: File): Observable<HttpEvent<any>> {
    const formData: FormData = new FormData();

    formData.append('file', file);

    const req = new HttpRequest('POST', `${this.baseUrl}/upload`, formData, {
      responseType: 'json'
    });

    return this.http.request(req);
  }

  getFiles(): Observable<any> {
    return this.http.get(`${this.baseUrl}/files`);
  }
}


*********************************************************************************** image-upload.component.html file:*****************************************************************

<div class="row">
  <div class="col-8">
    <label class="btn btn-default p-0">
      <input type="file" accept="image/*" (change)="selectFile($event)" />
    </label>
  </div>

  <div class="col-4">
    <button
      class="btn btn-success btn-sm float-right"
      [disabled]="!currentFile"
      (click)="upload()"
    >
      Upload
    </button>
  </div>
</div>

<div>
  <img [src]="preview" class="preview" />
</div>

@if (message) {
<div class="alert alert-secondary" role="alert">
  {{ message }}
</div>
}

<div class="card">
  <div class="card-header">List of Images</div>
  <ul class="list-group list-group-flush">
    @for (image of imageInfos | async; track image.name) {
    <li class="list-group-item">
      <p><a href="{{ image.url }}">{{ image.name }}</a></p>
      <img src="{{ image.url }}" alt="{{ image.name }}" height="80px" />
    </li>
    }
  </ul>
</div>





******************************************************************************image-upload.component.ts file:***********************************************************************

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileUploadService } from '../../services/file-upload.service';

@Component({
  selector: 'app-image-upload',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './image-upload.component.html',
  styleUrl: './image-upload.component.css',
})
export class ImageUploadComponent implements OnInit {
  currentFile?: File;
  message = '';
  preview = '';

  imageInfos?: Observable<any>;

  constructor(private uploadService: FileUploadService) {}
  
  
  selectFile(event: any): void {
  this.message = '';
  this.preview = '';
  const selectedFiles = event.target.files;
  
  
  ngOnInit(): void {
  this.imageInfos = this.uploadService.getFiles();
}
  

  if (selectedFiles) {
    const file: File | null = selectedFiles.item(0);

    if (file) {
      this.preview = '';
      this.currentFile = file;

      const reader = new FileReader();

      reader.onload = (e: any) => {
        console.log(e.target.result);
        this.preview = e.target.result;
      };

      reader.readAsDataURL(this.currentFile);
    }
  }
}

upload(): void {
  if (this.currentFile) {
    this.uploadService.upload(this.currentFile).subscribe({
      next: (event: any) => {
        if (event instanceof HttpResponse) {
          this.message = event.body.message;
          this.imageInfos = this.uploadService.getFiles();
        }
      },
      error: (err: any) => {
        console.log(err);

        if (err.error && err.error.message) {
          this.message = err.error.message;
        } else {
          this.message = 'Could not upload the image!';
        }
      },
      complete: () => {
        this.currentFile = undefined;
      }
    });
  }
}


}





********************************************************************************upload-images.component.css**************************************************************************

.preview {
  max-width: 200px;
}